% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coupled_partition_mcmc.R
\name{CoupledPartitionMCMC}
\alias{CoupledPartitionMCMC}
\title{Coupled Partition MCMC}
\usage{
CoupledPartitionMCMC(
  proposal = DefaultProposal(),
  temperature = c(1, 10, 100, 1000),
  verbose = TRUE
)
}
\arguments{
\item{proposal}{Proposal function for each chain. The swap proposal is
dealt with internally. Default is the DefaultProposal.}

\item{temperature}{Numeric value representing the temperature to raise the
score to. Default is c(1.0, 10.0, 100.0, 1000.0).}

\item{verbose}{Flag to pass MCMC information.}
}
\value{
Function that takes the current state and scorer that outputs a new
state.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
This is a constructor for a single Coupled Partition MCMC step. The function
constructs an environment with the proposal, inverse temperature, and verbose
flag. It then returns a function that takes the current_state and a scorer
object. This only allows the scores to be raised to a constant temperature
for every step.
}
\details{
One step implementation of the tempered partition MCMC.
}
\examples{
scorer <- CreateScorer(
  scorer = BNLearnScorer,
  data = bnlearn::learning.test
  )
nodes <- names(bnlearn::learning.test)
n_coupled_chains <- 8
coupled_state <- InitCoupledPartition(nodes, scorer,
                                     n_parallel_chains = 1,
                                     n_coupled_chains = n_coupled_chains)
coupled_transition <- CoupledPartitionMCMC(
  proposal = DefaultProposal(p = c(0.0, 1.0, 0.0, 0.0, 0.0)),
  temperature = 2^(0:(n_coupled_chains - 1))
)
coupled_transition(coupled_state, scorer)

}
